# File: pick_coords_standalone_final.py
# K·∫æT H·ª¢P T·ª™ C√ÅC FILE G·ªêC ƒêANG HO·∫†T ƒê·ªòNG C·ª¶A B·∫†N.
# Gi·ªØ nguy√™n 100% logic g·ªëc, ch·ªâ th√™m t√≠nh nƒÉng refresh ·∫£nh b·∫±ng ph√≠m 'r'.

import sys
import subprocess
import time
import os
import uuid
from pathlib import Path

# C√ÅC TH∆Ø VI·ªÜN B√äN NGO√ÄI C·∫¶N C√ÄI ƒê·∫∂T
# pip install opencv-python numpy pytesseract pyperclip
import cv2
import numpy as np
import pytesseract

try:
    import pyperclip
except ImportError:
    print("C·∫£nh b√°o: Th∆∞ vi·ªán pyperclip ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. S·∫Ω kh√¥ng th·ªÉ copy t·ªça ƒë·ªô v√†o clipboard.")
    print("ƒê·ªÉ c√†i ƒë·∫∑t, ch·∫°y: pip install pyperclip")
    pyperclip = None

# ====================================================================
# === PH·∫¶N 1: CODE SAO CH√âP T·ª™ CONFIG.PY =============================
# ====================================================================

# !!! VUI L√íNG KI·ªÇM TRA V√Ä CH·ªàNH L·∫†I C√ÅC ƒê∆Ø·ªúNG D·∫™N B√äN D∆Ø·ªöI !!!
DEBUG = True
SHOT_DIR = "shots"
ADB_PATH = r"D:\Program Files\Nox\bin\nox_adb.exe"
DEVICE = "127.0.0.1:62025"
SCREEN_W, SCREEN_H = 900, 1600
TESSERACT_EXE = r"C:\Program Files\Tesseract-OCR\tesseract.exe"
TESSDATA_DIR = r"C:\Program Files\Tesseract-OCR\tessdata"


# ====================================================================
# === PH·∫¶N 2: CODE SAO CH√âP T·ª™ ADB_UTILS.PY ==========================
# ====================================================================

def _run(args, text=True):
    return subprocess.run(args, capture_output=True, text=text)


def adb(*args, text=True):
    # Th√™m -s DEVICE v√†o l·ªánh, y h·ªát code g·ªëc c·ªßa b·∫°n
    cmd_with_device = [ADB_PATH, "-s", DEVICE] + list(args)
    if DEBUG:
        print("‚Üí ADB:", " ".join([str(x) for x in cmd_with_device]))
    return _run(cmd_with_device, text=text)


def ensure_connected():
    # H√†m n√†y t·ª´ file g·ªëc c·ªßa b·∫°n
    if not Path(ADB_PATH).exists():
        raise FileNotFoundError(f"Kh√¥ng th·∫•y ADB ·ªü: {ADB_PATH}")

    # Ch·∫°y l·ªánh adb devices kh√¥ng c√≥ -s ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi chung
    out = _run([ADB_PATH, "devices"]).stdout
    if DEVICE not in out:
        print(f"üîå ƒêang k·∫øt n·ªëi {DEVICE} ...")
        _run([ADB_PATH, "connect", DEVICE])
        out = _run([ADB_PATH, "devices"]).stdout

    if DEVICE not in out or "device" not in out.split(DEVICE)[-1]:
        raise RuntimeError(f"ADB ch∆∞a th·∫•y {DEVICE}. H√£y m·ªü Nox v√† ƒë√∫ng c·ªïng.")
    print(f"‚úÖ ADB ƒë√£ k·∫øt n·ªëi {DEVICE}")


# ====================================================================
# === PH·∫¶N 3: CODE SAO CH√âP T·ª™ SCREEN_UTILS.PY ========================
# ====================================================================

def screencap_bytes() -> bytes:
    p = adb("exec-out", "screencap", "-p", text=False)
    if p.returncode != 0 or not p.stdout:
        raise RuntimeError("Kh√¥ng ch·ª•p ƒë∆∞·ª£c m√†n h√¨nh qua ADB.")
    return p.stdout


def screencap_cv(debug_save: bool | None = None) -> np.ndarray | None:
    if debug_save is None:
        debug_save = DEBUG
    try:
        data = screencap_bytes()
        img = cv2.imdecode(np.frombuffer(data, np.uint8), cv2.IMREAD_COLOR)
        if img is None:
            raise RuntimeError("Gi·∫£i m√£ ·∫£nh th·∫•t b·∫°i.")

        if debug_save:
            Path(SHOT_DIR).mkdir(parents=True, exist_ok=True)
            ts = time.strftime("%Y%m%d_%H%M%S")
            path = Path(SHOT_DIR) / f"screen_{ts}.png"
            cv2.imwrite(str(path), img)
            print(f"üíæ Saved: {path}  shape={img.shape}")
        return img
    except Exception as e:
        print(f"L·ªói khi ch·ª•p m√†n h√¨nh: {e}")
        return None


# ====================================================================
# === PH·∫¶N 4: CODE SAO CH√âP T·ª™ OCR_UTILS.PY ==========================
# ====================================================================

pytesseract.pytesseract.tesseract_cmd = TESSERACT_EXE


def _set_tess_prefix():
    prefix = str(Path(TESSDATA_DIR))
    if not prefix.endswith(("\\", "/")):
        prefix += os.sep
    os.environ["TESSDATA_PREFIX"] = prefix


_set_tess_prefix()


def ocr_image(img_bgr, lang="vie", psm=6, whitelist=None, save_roi: bool | None = None) -> str:
    # ƒê√¢y l√† h√†m ocr_image t·ª´ file g·ªëc c·ªßa b·∫°n
    if save_roi is None: save_roi = DEBUG

    gray = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2GRAY)
    gray = cv2.GaussianBlur(gray, (3, 3), 0)
    gray = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]

    if save_roi:
        Path(SHOT_DIR).mkdir(parents=True, exist_ok=True)
        p = Path(SHOT_DIR, f"roi_{uuid.uuid4().hex[:6]}.png")
        cv2.imwrite(str(p), gray)
        print(f"üíæ ROI saved: {p}")

    cfg = f"--oem 3 --psm {psm}"
    if whitelist:
        cfg += f" -c tessedit_char_whitelist={whitelist}"

    try:
        return pytesseract.image_to_string(gray, lang=lang, config=cfg).strip()
    except Exception as e:
        print(f"L·ªói Tesseract: {e}")
        return "[OCR FAILED]"


# ====================================================================
# === PH·∫¶N 5: CODE T·ª™ TEST/PICK_COORDS.PY (Th√™m t√≠nh nƒÉng) ===========
# ====================================================================

# C√°c bi·∫øn to√†n c·ª•c t·ª´ file g·ªëc
SCALE = 0.6
img = None
disp = None
start = None
dragging = False


def copy_clip(txt: str):
    if pyperclip:
        pyperclip.copy(txt)
    else:
        print("(pyperclip not installed, cannot copy to clipboard)")


def on_mouse(event, x, y, flags, param):
    global start, dragging, disp, img
    gx, gy = int(x / SCALE), int(y / SCALE)

    if event == cv2.EVENT_RBUTTONDOWN:
        print(f"üìç Point: {gx},{gy}")
        copy_clip(f"{gx},{gy}")

    if event == cv2.EVENT_LBUTTONDOWN:
        start = (gx, gy)
        dragging = True

    elif event == cv2.EVENT_MOUSEMOVE and dragging:
        disp[:] = cv2.resize(img, None, fx=SCALE, fy=SCALE, interpolation=cv2.INTER_AREA)
        x1, y1 = start
        x2, y2 = gx, gy
        cv2.rectangle(disp, (int(x1 * SCALE), int(y1 * SCALE)), (int(x2 * SCALE), int(y2 * SCALE)), (0, 255, 0), 2)

    elif event == cv2.EVENT_LBUTTONUP and dragging:
        dragging = False
        x1, y1 = start
        x2, y2 = gx, gy
        if x2 < x1: x1, x2 = x2, x1
        if y2 < y1: y1, y2 = y2, y1
        h, w = img.shape[:2]
        x1 = max(0, min(w - 1, x1));
        x2 = max(0, min(w, x2))
        y1 = max(0, min(h - 1, y1));
        y2 = max(0, min(h, y2))
        if x2 <= x1 or y2 <= y1:
            print("‚ö†Ô∏è ROI r·ªóng, b·ªè qua.")
            return

        roi_txt = f"{x1},{y1},{x2},{y2}"
        print("üìê ROI:", roi_txt)
        copy_clip(roi_txt)
        roi = img[y1:y2, x1:x2].copy()
        Path(SHOT_DIR).mkdir(parents=True, exist_ok=True)
        ts = time.strftime("%Y%m%d_%H%M%S")
        roi_path = Path(SHOT_DIR) / f"roi_{ts}_{x1}-{y1}_{x2}-{y2}.png"
        cv2.imwrite(str(roi_path), roi)
        print(f"üíæ ROI saved: {roi_path}")
        try:
            text = ocr_image(roi, lang="vie", psm=6, save_roi=False)
            print("üîé OCR:", text if text else "(r·ªóng)")
        except Exception as e:
            print("‚ùå OCR error:", e)


if __name__ == "__main__":
    try:
        ensure_connected()
        img = screencap_cv(debug_save=DEBUG)
        if img is None:
            raise RuntimeError("Kh√¥ng th·ªÉ ch·ª•p ·∫£nh m√†n h√¨nh ban ƒë·∫ßu.")

        disp = cv2.resize(img, None, fx=SCALE, fy=SCALE, interpolation=cv2.INTER_AREA)

        title = "Pick ROI (L-drag=OCR, R-click=point, r=Refresh, q/ESC=quit)"
        cv2.namedWindow(title)
        cv2.setMouseCallback(title, on_mouse)

        while True:
            cv2.imshow(title, disp)
            key = cv2.waitKey(20) & 0xFF

            # Tho√°t ch∆∞∆°ng tr√¨nh
            if key in (ord('q'), 27):  # 27 l√† m√£ c·ªßa ph√≠m ESC
                break

            # T√çNH NƒÇNG M·ªöI: Nh·∫•n 'r' ƒë·ªÉ refresh ·∫£nh
            if key == ord('r'):
                print("\nƒêang l√†m m·ªõi ·∫£nh m√†n h√¨nh...")
                new_img = screencap_cv(debug_save=DEBUG)
                if new_img is not None:
                    img = new_img
                    disp = cv2.resize(img, None, fx=SCALE, fy=SCALE, interpolation=cv2.INTER_AREA)
                    print("L√†m m·ªõi th√†nh c√¥ng!")
                else:
                    print("L√†m m·ªõi th·∫•t b·∫°i, gi·ªØ l·∫°i ·∫£nh c≈©.")

        cv2.destroyAllWindows()

    except Exception as e:
        print(f"\nL·ªói nghi√™m tr·ªçng: {e}")
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t.")
        sys.exit(1)